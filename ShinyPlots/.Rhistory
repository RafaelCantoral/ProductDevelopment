data<-read.csv("dataOut.csv")
str(data)
summary(data)
str(data)
library(dplyr)
data<-data %>%
mutate(timestamp = as.Date(timestamp))
head(data)
str(data)
library(tseries)
library(forecast)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="0020d6cc57219cc1874e0c319ecacbf7") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12, start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="05da7031fc021630be64efd6f7ece321") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="0a33f0cedcd6f31582616dad678a913c") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="4f3e48d4050be1cd2f8747fa5ea866d0") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="52039bf570c9d19ade3883ca9aa78644") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="605836c043ec8e96037561ee446c3757") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="6a55b427fc1d7793865b864336908bc8") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="768a52d63789c009bb2ef8aed967db24") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="9a2a751cb5e2d0e285bff2e499e10641") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="a96920598ca8396de15c6ca55c1ad0bc") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="aaa1d987f8e9443da3f8c105bf7113bc") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="ce469f07adea576ec8ba8eb4aa289ee9") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="e7936c80b4667ed20eb92ba8cf47f21f") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="e98c63b52b7dc69e67ce7c8922d6e75e") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="f01fe8a1197c7482caead6848bd43813") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
# Seleccion de categoria especifica
temp<-data %>%
filter(id_producto=="fef1f2f21c1592414d1dddc57acbca61") %>%
select(timestamp,produccion)
# Conversion a serie de tiempo
serietiempo<-ts(temp[-1], frequency = 12,start = c(2015,1), end = c(2021,12))
plot(serietiempo)
trends<-decompose(serietiempo)
plot(trends)
# Verificar si la serie es stationary
adf.test(serietiempo, alternative = "stationary")
# Seleccion de modelo
modelo<-auto.arima(serietiempo, D=1)
modelo
# prediccion
pred <- forecast(modelo, nrow(temp)/2)
plot(pred)
set.seed(200)
x<-cumsum(rnorm(n=1500, mean=0, sd=5))
y<-ts(x, start = 1900, frequency = 12)
plot(y)
plot(decompose(y))
set.seed(300)
x<-cumsum(rnorm(n=1500, mean=0, sd=5))
y<-ts(x, start = 1900, frequency = 12)
plot(y)
plot(decompose(y))
set.seed(400)
x<-cumsum(rnorm(n=1500, mean=0, sd=5))
y<-ts(x, start = 1900, frequency = 12)
plot(y)
plot(decompose(y))
set.seed(300)
x<-cumsum(rnorm(n=1500, mean=0, sd=5))
y<-ts(x, start = 1900, frequency = 12)
plot(y)
plot(decompose(y))
summary(y)
library(tseries)
adf.test(y)
ydiff<-diff(y, differences = 1)
ydiff<-diff(y, differences = 1)
plot(ydiff)
adf.test(ydiff)
install.packages("xfun")
---
title: "R Notebook"
output: html_notebook
---
# Texto
## Italicas y Negritas
* La palabra **hola** esta en negritas.
* Utilizamos `**hola**`
* La palabra *mundo* esta en italicas.
* Utilizamos `*mundo*`
install.packages("tinytex")
# Texto
## Italicas y Negritas
* La palabra **hola** esta en negritas.
* Utilizamos `**hola**`
* La palabra *mundo* esta en italicas.
* Utilizamos `*mundo*`
## Sub y Supra indice
* La formula quimica del agua es H~2~0 y la del carbonato de sodio es Na~2~CO~3~
* `H~2~0` = H~2~0
* `Na~2~CO~3~` = Na~2~CO~3~
* Tambien podemos incluir texto
* Precio~dia~ = `Precio~dia~`
* No puede incluir espacio
* Tambien podemos hacer exponentes X^2^
* x^2^ = `x^2^`
## inline Code
Codigo `x <- x+1`
## Hiperlinks
* Para crear un link usamos `[Text](Link)`
* Ejmeplo: [Academatica](https://www.youtube.com/academatica)
# imagenes
Para agregar imagenes usamos `![Text](path a imagen)`
![](dilbert.jpg)
![Dilbert on data quality](dilbert.jpg)
# Referencias
# Texto
## Italicas y Negritas
* La palabra **hola** esta en negritas.
* Utilizamos `**hola**`
* La palabra *mundo* esta en italicas.
* Utilizamos `*mundo*`
head(mtcars)
x <- sample(letters,replace=TRUE,size=10)
print(x)
plot(cars)
reticulate::repl_python()
library(reticulate)
yes
x = 42 * 2
print(x)
quit
use_condaenv("r-reticulate")
head(mtcars)
x <- sample(letters,replace=TRUE,size=10)
print(x)
plot(cars)
reticulate::repl_python()
library(reticulate)
x = 42 * 2
print(x)
quit
use_condaenv("r-reticulate")
---
title: "R Notebook"
output: html_notebook
---
# Texto
## Italicas y Negritas
* La palabra **hola** esta en negritas.
* Utilizamos `**hola**`
* La palabra *mundo* esta en italicas.
* Utilizamos `*mundo*`
## Sub y Supra indice
* La formula quimica del agua es H~2~0 y la del carbonato de sodio es Na~2~CO~3~
* `H~2~0` = H~2~0
* `Na~2~CO~3~` = Na~2~CO~3~
* Tambien podemos incluir texto
* Precio~dia~ = `Precio~dia~`
* No puede incluir espacio
* Tambien podemos hacer exponentes X^2^
* x^2^ = `x^2^`
## inline Code
Codigo `x <- x+1`
## Hiperlinks
* Para crear un link usamos `[Text](Link)`
* Ejmeplo: [Academatica](https://www.youtube.com/academatica)
# imagenes
Para agregar imagenes usamos `![Text](path a imagen)`
![](dilbert.jpg)
![Dilbert on data quality](dilbert.jpg)
# Referencias
Para agregar pie de pagina utilizamos `^[]`
Para este demo usaremos como referencia el libro *R Markdown: The Definitive Guide*^[https://bookdown.org/yihui/rmarkdown/]
![Dilbert on data quality^[Imagen descargada sin permiso de https://www.pinterest.com/pin/167688786102533739/]](dilbert.jpg)
# Encabezados y Sub Encabezados
* `#` Heading 1
* `##` Heading 2
* `###` Heading 3
# listas
## listas no ordenadas
Podemos usar `-`, `+` o `*`
```
+ item 1
+ item 1.1
+ item 1.2
+ item 2
```
+ item 1
+ item 1.1
+ item 1.2
+ item 2
## Listas Ordenadas
```
1. Item 1
* item 1.1
2. Item 2
1. item 2.1
2. item 2.2
```
1. Item 1
* item 1.1
2. Item 2
1. item 2.1
2. item 2.2
# Quotes
```
> In God we trust, all others bring data.
>
> --- W Edwards Deming
```
> "In God we trust, all others bring data."
>
> --- W Edwards Deming
>“Keep away from people who try to belittle your ambitions. Small people always do that, but the really great make you feel that you, too, can become great.”
>
> --- Mark Twain
# Plain Code Chunks
Despues de 3 backticks se puede escribir chunk de codigo
```
SELECT *
FROM schema.table
WHERE id > 100
ORDER BY date
LIMIT 10
```
# Expresiones matematica
`$\int_a^b e^x dx = e^x+C$` inline
---
title: "Clase1"
output: html_document
---
# Texto
## Italicas y Negritas
* La palabra **hola** esta en negritas.
* Utilizamos `**hola**`
* La palabra *mundo* esta en italicas.
* Utilizamos `*mundo*`
## Sub y Supra indice
* La formula quimica del agua es H~2~0 y la del carbonato de sodio es Na~2~CO~3~
* `H~2~0` = H~2~0
* `Na~2~CO~3~` = Na~2~CO~3~
* Tambien podemos incluir texto
* Precio~dia~ = `Precio~dia~`
* No puede incluir espacio
* Tambien podemos hacer exponentes X^2^
* x^2^ = `x^2^`
## inline Code
Codigo `x <- x+1`
## Hiperlinks
* Para crear un link usamos `[Text](Link)`
* Ejmeplo: [Academatica](https://www.youtube.com/academatica)
# imagenes
Para agregar imagenes usamos `![Text](path a imagen)`
![](dilbert.jpg)
![Dilbert on data quality](dilbert.jpg)
head(mtcars)
x <- sample(letters,replace=TRUE,size=10)
print(x)
plot(cars)
reticulate::repl_python()
library(reticulate)
x = 42 * 2
print(x)
quit
use_condaenv("r-reticulate")
install.packages("Shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("Rtools")
shiny::runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Plot_interacciones')
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Plot_interacciones')
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Plot_interacciones')
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Plot_interacciones')
shiny::runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Tarea Shiny')
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Tarea Shiny')
runApp()
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Tarea Shiny')
runApp('Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Tarea Shiny')
shiny::runApp('~/Postgrado Analisis y Prediccion de Datos/Product Development/Shiny/Semana 7/Tarea Shiny')
runApp()
